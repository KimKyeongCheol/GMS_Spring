<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  <!-- 
  public String insert(Map<?,?> map);
	public List<?> selectAll(CommandDTO cmd);
	public List<?> selectByName(CommandDTO cmd);
	public StudentDTO selectById(CommandDTO cmd);
	public String count(CommandDTO cmd);
	public String update(MemberDTO member);
	public String delete(CommandDTO cmd);
	public MemberDTO login(CommandDTO cmd);
   -->
  <mapper namespace="com.gms.web.mapper.MemberMapper">
  <select id="count" resultType="string">
  <!--     regdate    -->
  	select count(*) as count from member
  </select>
  <insert id="insert" parameterType="com.gms.web.member.MemberDTO">
	INSERT INTO member(member_id,name,password,ssn,regdate,phone,email,profile) 
	VALUES(#{id},#{name},#{password},#{ssn},now(),#{phone},#{email},#{profile})
  </insert>  
 
  <!-- #{search} : '' 가 있고 ${}는 ''가 없다. -->
   <select id="login" resultType="com.gms.web.member.MemberDTO" parameterType="com.gms.web.command.CommandDTO">
  	select
  		 member_id AS id,
  		 name,
  		 password,
  		 ssn,
  		 regdate,
  		 phone,
  		 email,
  		 profile
  		 from member where member_id like #{search}
  </select>
   <select id="selectAll" resultType="com.gms.web.member.StudentDTO" parameterType="com.gms.web.command.CommandDTO">
  	select t.num,t.*  from  
  	(select @rownum := @rownum + 1 as num, s.* from student s,(select @rownum:=0)r )t 
  	where t.num between #{startRow} and #{endRow}
  </select>
  <!-- select * from 처럼 *를 부여하면 유지보수하기 힘들기때문에 컬럼명을 전부 입력해준다. -->
  <select id="selectByName" resultType="com.gms.web.member.StudentDTO"
 parameterType="com.gms.web.command.CommandDTO" >
     select id,name,ssn,regdate,phone,email,pass,subjects from student where name like #{search}
  </select>
    <select id="selectById" resultType="com.gms.web.member.StudentDTO"
 parameterType="com.gms.web.command.CommandDTO" >
     select id,name,ssn,regdate,phone,email,pass,subjects from student where id like #{search}
  </select>
  
  
  <update id="update" parameterType="com.gms.web.member.MemberDTO">
  UPDATE member SET email=#{email},phone=#{phone},password=#{password} WHERE member_id=#{id}
  </update>
  
  <delete id="delete" parameterType="com.gms.web.command.CommandDTO">
  DELETE FROM member WHERE member_id like #{search}
  </delete>
  
 <!--  <insert id="insert">
  <selectKey keyProperty="id" resultType="int" order="BEFORE">
    <if test="_databaseId == 'oracle'">
      select seq_users.nextval from dual
    </if>
    <if test="_databaseId == 'db2'">
      select nextval for seq_users from sysibm.sysdummy1"
    </if>
  </selectKey>
  insert into users values (#{id}, #{name})
</insert>
  
  	<select id="selectById" resultType="com.gms.web.member.MemberDTO">
  	select * from member where id=#{id}
  	</select>
  	
  	
  	<select id="selectAll" resultType="Blog">
		  SELECT * FROM BLOG 
		  WHERE state = ‘ACTIVE’ 
  	<if test="title != null">
    	AND ti	tle like #{title}
  	</if>
	</select>
	
	<select id="findActiveBlogLike"  resultType="Blog">
 		 SELECT * FROM BLOG WHERE state = ‘ACTIVE’ 
  <if test="title != null">
  		 AND title like #{title}
  </if>
  <if test="author != null and author.name != null">
    	AND author_name like #{author.name}
  </if>
</select>

<select id="findActiveBlogLike" 
     resultType="Blog">
  SELECT * FROM BLOG WHERE state = ‘ACTIVE’
  <choose>
    <when test="title != null">
      AND title like #{title}
    </when>
    <when test="author != null and author.name != null">
      AND author_name like #{author.name}
    </when>
    <otherwise>
      AND featured = 1
    </otherwise>
  </choose>
</select>

<select id="findActiveBlogLike" 
     resultType="Blog">
  SELECT * FROM BLOG 
  WHERE 
  <if test="state != null">
    state = #{state}
  </if> 
  <if test="title != null">
    AND title like #{title}
  </if>
  <if test="author != null and author.name != null">
    AND author_name like #{author.name}
  </if>
</select>

<select id="selectPostIn" resultType="domain.blog.Post">
  SELECT *
  FROM POST P
  WHERE ID in
  <foreach item="item" index="index" collection="list"
      open="(" separator="," close=")">
        #{item}
  </foreach>
</select>

<update id="updateAuthorIfNecessary">
  update Author
    <set>
      <if test="username != null">${username=#{username},</if>
      <if test="password != null">password=#{password},</if>
      <if test="email != null">email=#{email},</if>
      <if test="bio != null">bio=#{bio}</if>
    </set>
  where id=#{id}
</update>

<delete id="">

</delete>

 -->

  </mapper>